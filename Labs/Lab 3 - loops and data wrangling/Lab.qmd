---
title: "NRES 776 Lab 3"
subtitle: "Blank for now"
author: Sunny Tseng
format:
  revealjs: 
    slide-number: true
    preview-links: auto
    #css: styles.css
    #footer: <https://quarto.org>
    theme: [default, styles.scss]
    #smaller: true
    #scrollable: true
    incremental: true
    #embed-resources: true
    width: 1200
    fontsize: 1.7em
editor: visual
---

```{r setup, include = FALSE, cache=FALSE}
#| column: screen
#| out-width: 100%
#| fig-format: svg
library(palmerpenguins)
library(tidyverse)
library(here)

knitr::opts_chunk$set(dpi = 150, fig.width = 8, out.width = "90%",
                      fig.align = "center", fig.asp = 0.45)

```

# Welcome to your second R lab!

## Our schedule today

-   Announcements (5 min)

-   Discussion paper presentation (45 mins)

-   Blank for now

-   Quiet time for practice (20 min)

## Announcements

-   Some cool plots we got from lab2
-   Create a R project, and a data folder inside it.
-   Save the spreadsheets inside the data folder.
-   Preset: packages we need today
    -   here: for file path

    -   tidyverse: for data wrangling

    -   readxl: for read in excel files

```{r, echo = TRUE, eval = FALSE}

### Only do this if you haven't install them
install.packages(c("here", "tidyverse"))

### Load the packages
library(here)
library(tidyverse)
```

# Discussion paper presentation

-   Abigail Doerksen
-   Julia Bizon
-   Temitope Olufemi

# The universe of tidyverse: background

## Data life cycle

![](images/paste-C6994DE0.png)

-   We have learned data "visualization" and data "import" (sort of) in lab 2

-   Today we want to cover the "tidy" and "transform" part, which all together called "data wrangling"

-   In the world of R, each of this step has some associated packages

## What is tidyverse?

There are some packages that you are likely to use in everyday data analysis:

-   `readr` package: for importing data in R
-   `ggplot2` package: for making graphics, data visualization
-   `dplyr` package: manipulating data frames
-   `purrr` package: working with functions
-   Full list of tidyverse packages is shown here: <https://www.tidyverse.org/packages/>

These are called core tidyverse, and we can load all the tidyverse packages at once by installing and loading the **tidyverse** package:

```{r, echo = TRUE, eval = FALSE}
library(tidyverse)
```

## What's tidyverse?

![](images/paste-9571686D.png)

## Tidy data

> We say that a data table is in *tidy* format if each row represents one observation and columns represent the different variables available for each of these observations.

![](images/paste-02EFA4CE.png)

::: aside
Illustrations from the [Openscapes](https://www.openscapes.org/) blog [Tidy Data for reproducibility, efficiency, and collaboration](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst
:::

## Pipe

> In R we can perform a series of operations by sending the results of one function to another using what is called the *pipe operator*: `%>%` or `|>`

::: columns
::: {.column width="40%"}
Think it like the English word "then".
:::

::: {.column width="60%"}
![](images/paste-0AE74B91.png){fig-align="right" width="626"}
:::
:::

::: aside
Artwork by Allison Horst
:::

## Pipe: %\>% or \|\>

Let's say, we want to find the mean of the petal length column in the iris data set.

::: columns
::: {.column width="50%"}
In base R:

```{r, echo = TRUE}

petal_length <- pull(iris, Petal.Length)
petal_length_mean <- mean(petal_length)


petal_length_mean
```

You can also do:

```{r, echo = TRUE}
petal_length_mean <- mean(pull(iris, Petal.Length))

petal_length_mean
```
:::

::: {.column width="50%"}
In tidyverse, using pipe:

```{r, echo = TRUE}

petal_length_mean <- iris %>%
  pull(Petal.Length) %>%
  mean()

petal_length_mean

```

Advantages of using pipe:

-   reduce the number of objects
-   easier to read as it has the same logic as speaking
:::
:::

-   In this lab, I am going to use `%>%` for code demonstration, but feel free to use whatever you feel comfortable and efficient.

## Base R vs tidyverse?

There is no right or wrong or which way should be used. And both can achieve same tasks. But once you do much more coding, you might find tidyverse coding makes data analysis a bit easier. 😃

::: columns
::: {.column width="50%"}
Base R: all the functionality that comes built into the R programming language

-   Use intermediate objects

-   Use `data.frame` data type to manage data frames

-   Use `read.csv()` to import files

-   Use `[ , col]` to isolate column

-   ... and more
:::

::: {.column width="50%"}
Tidyverse: a collection of packages that add onto R, with its own ethos and stance on data analysis.

-   Use pipes

```{=html}
<!-- -->
```
-   Use `tibble` data type to manage data frames

-   Use `read_csv()` to import files

-   Use `pull()` function to isolate column

-   ... and more
:::
:::

# Data I/O: with csv files

with tidyverse `readr` package

# Data wrangling: rows

with tidyverse `dplyr` package

## filter()

-   Comparisons (`==`)

-   Missing values (use `is.na()` instead of `== NA`)

-   `%in%`

## arrange()

## distinct()

# Data wrangling: columns

with tidyverse `dplyr` package

## mutate()

-   `if_else()`

-   `case_when()`

## select()

## rename()

## relocate()

# Data wrangling: group calculation

## group_by()

## summarize()

-   `count(sort = TRUE)`, the same as

-   `n()`: count the number of observations in the group

-   `n_distinct()`

-   `sum()`

## slice\_\*() functions

## ungroup()

# Data wrangling: reshape

with tidyverse `dplyr` package

## pivot_longer()

## pivot_wider()

# Data I/O: Self-contained projects

We will be using `here` package and R project

## Concept of a project

> If the first line of your R script is `setwd("C:\Users\jenny\path\that\only\I\have")` I will come into your office and SET YOUR COMPUTER ON FIRE 🔥. - Jenny Bryan

-   Have you ever received a R script from a friend with this line

-   And it's 0% chance that you can run this `setwd()` without an error

-   If you never heard about `setwd()`

-   Don't worry, you don't need to know 😄

![](images/paste-58AC1017.png){.absolute top="300" right="0" width="622"}

## Concept of a project

> A folder on your computer that holds all the files relevant to that particular piece of work.

-   Get your files organized

-   Your work is reproducible

-   There are two things that can help us creating a self-contained project

### 1. R project

A self-contained working environment with folders for data, scripts, outputs, etc

### 2. `here` package

When import/export data is required, filepaths are written relative to the root folder of the R project.

## R project: how to use

1.  Open R Studio
2.  Select `File` \> `New Project` \> `New Directory` \> provide name and where you want it to be saved
3.  The R project you create will come in as a folder containing a *.Rproj* file
4.  This is a shortcut and likely the primary way you will open your project
5.  Your R Studio top-right corner would show the project you are in

![](images/paste-2092CCC6.png){fig-align="center"}

## `here` package: how to use

1.  It's a good practice to structure your working directory in a consistent way
2.  Created a data sub folder, and put all the data files you might need
3.  Store your R script in the root
4.  Run `library(here)` as the first line in script
5.  Then you will only need relative path whenever you need to import data

```{r, eval = FALSE, echo = TRUE}
library(here)
my_data <- read_csv(here("data", "my_data.csv"))

```

![](images/57457fc3-1d2d-4a3b-a9b7-f0b62e418cd5.png){fig-align="center" width="419"}

![](images/Capture-02.PNG){.absolute bottom="300" right="0" width="261"}

# Data I/O: Read and write spreadsheet data in R

We will be using packages `readr` and `readxl`

Practice files were posted on Moodle, download and save them to your data folder

## Overview

```{r, echo = TRUE}
library(readr)
library(readxl)
```

With `readr` and `readxl`, you will be able to use the following functions to read spreadsheets into R.

| Function       | Format                                            | Typical suffix |
|-------------------|----------------------------------|-------------------|
| `read_delim()` | general text file format, must define delimiter   | .txt           |
| `read_csv()`   | comma separated values                            | .csv           |
| `read_csv2()`  | semicolon separated values                        | .csv           |
| `read_tsv()`   | tab delimited separated values                    | .tsv           |
| `read_table()` | white space separated values                      | .txt           |
| `read_excel()` | auto detect the format for Microsoft excel sheets | .xlsx or .xls  |

::: aside
Note: `readr` is one of the `tidyverse` core packages, so you don't need to load it separately if you already have `tidyverse`
:::

## Read CSVs

> `read_csv()` take one necessary argument, which is `file`, a path to a file.

```{r, echo = TRUE}

my_csv_data <- read_csv(file = here("data", "rock.csv"))

my_csv_data
```

## Read excel files

> `read_excel()` take one necessary argument, which is `path`, a path to a file. You will need to define `sheet` argument if you have more than one sheet in excel (default to first sheet).

```{r, echo = TRUE}
my_excel_data <- read_excel(path = here("data", "rock.xlsx"),
                            sheet = 1)

my_excel_data
```

## Read TSVs or TXTs

> `read_tsv()` take one necessary argument, which is `file`, a path to a file.

```{r, echo = TRUE}
my_tsv_data <- read_tsv(file = here("data", "rock.tsv"))

my_tsv_data
```

## Read whatever

> `read_delim()` take two necessary argument, which is `file`, a path to a file, and `delim`, the separator. It's the most flexible way to read in data.

```{r, echo = TRUE}
my_data <- read_delim(file = here("data", "rock.txt"),
                      delim = "\t")

my_data
```

## Write CSVs

### csv is the most commonly used because of its simplicity and compatibility

> `write_csv()` takes two necessary arguments `x`, the data frame object you want to export, and `file`, the path you want to save the file to.

```{r, echo = TRUE}

write_csv(x = my_data,
          file = here("data", "my_data.csv"))
```

Now, check your folder, and you should find a file got saved with the name `my_data.csv`.

![](images/paste-14D85C4A.png){fig-align="center"}

# 

# R Others: Miscellaneous

Here is some advanced materials if you are comfortable and familiar with the content above

## What's wrong?

-   no installation of package

-   no bracket

-   wrong kind of bracket

-   ggplot2 package but the function is ggplot haha

-   no geom\_() specified

-   the theme is not working because of the sequence

-   fill and colour in bar plot!

## R `ggplot()` cheatsheet

## Commenting your code

## Short cuts

-   Ctrl + Enter

-   Ctrl +Shift + C

-   Ctrl + I

-   Ctrl + L

-   Esc

-   Ctrl + S

# Lab assignment

## Your task I

1.  Using `penguins` data set, create plot(s) that best support the following statement: "The body mass of male penguins are larger than female penguins, regardless of species." - Figure A
2.  Using `penguins` data set, create plot(s) that best support the following statement: "Regardless of species, we found a positive relationship between body mass and flipper length. And this finding holds true for both genders." - Figure B

![](images/paste-B35E8558.png){fig-align="center"}

## Your task II

3.  Use `patchwork` to combine plots together, and annotated well.
4.  Bonus: Import your own data set, create one plot and write caption for it. - Figure C. Provide this plot and caption in same patchwork product.

### Hints

1.  Take a look at `penguins` data set and use `ggplot()`
2.  Check `drop_na()` function if you want to remove NA values from a data set
3.  `patchwork` package
4.  use `read_csv()` to import data

## Submission

### Due next Wednesday 23:59 pm, Moodle

### Evaluation

-   File name and type (NRES776\_*firstname*\_*lastname*\_lab_2.**png**) (10%)

-   Accuracy, 15%, and quality, 25%, of each two plots -\> (80%)

-   Annotation of the final patchwork product (10%)

-   Bonus points for extra question (30%)

### Use of ChatGPT, stackflow, or...

-   Copy/Paste is your friend! (and never apologize for it!) 😍

-   But be sure you understand **why** the codes are doing what they are doing 🧑‍🎓

-   So that you form some new neuron connections in the brain 🧠

## Quiet/Noisy room

![](images/d6b4f8cb-53bf-49d5-822c-e45cd01204a4.png){fig-align="center" width="867"}

::: footer
Artwork by @allison_horst
:::

## Wrap up

### Before we meet again

-   Have a nice food intake

-   Have a nap

-   Have a good break

### Next time

-   Will see you in 1.5 hours on zoom!
