---
title: "NRES 776 Lab 3"
subtitle: "Data wrangling"
author: Sunny Tseng
format:
  revealjs: 
    slide-number: true
    preview-links: auto
    #css: styles.css
    #footer: <https://quarto.org>
    theme: [default, styles.scss]
    #smaller: true
    #scrollable: true
    incremental: true
    #embed-resources: true
    width: 1200
    fontsize: 1.7em
    fig-align: "center"
editor: visual
---

```{r setup, include = FALSE, cache=FALSE}
#| column: screen
#| out-width: 100%
#| fig-format: svg

set.seed(100)
library(palmerpenguins)
library(tidyverse)
library(here)

knitr::opts_chunk$set(dpi = 150, fig.width = 8, out.width = "90%",
                      fig.align = "center", fig.asp = 0.45)

```

# Welcome to your second R lab!

## Our schedule today

-   Announcements (5 min)

-   Discussion paper presentation (45 mins)

-   Introduction to tidyverse (15 min)

-   Data I/O (5 min)

-   Data wrangling (40 min)

-   Quiet time for practice (60 min)

## Announcements

-   Some cool plots we got from lab2
-   Create a R project, and a data folder inside it.
-   Save the spreadsheets inside the data folder.
-   Preset: packages we need today
    -   `here`: for file path

    -   `tidyverse`: for data I/O and data wrangling

    -   `palmerpenguins`: you know this one

```{r, echo = TRUE, eval = FALSE}

### Only do this if you haven't install them
# install.packages(c("here", "tidyverse", "palmerpenguins"))

### Load the packages
library(here)
library(tidyverse)
library(palmerpenguins)
```

# Discussion paper presentation

-   Abigail Doerksen
-   Julia Bizon
-   Temitope Olufemi

# The universe of tidyverse: background

## Data life cycle

![](images/paste-C6994DE0.png)

-   We have learned data "visualization" and data "import" (sort of) in lab 2

-   Today we want to cover the "tidy" and "transform" part, which all together called "data wrangling"

-   In the world of R, each of this step has some associated packages

## What is tidyverse?

There are some packages that you are likely to use in everyday data analysis:

-   `readr` package: for importing data in R
-   `ggplot2` package: for making graphics, data visualization
-   `dplyr` package: manipulating data frames
-   `purrr` package: working with functions
-   Full list of tidyverse packages is shown here: <https://www.tidyverse.org/packages/>

These are called core tidyverse, and we can load all the tidyverse packages at once by installing and loading the **tidyverse** package:

```{r, echo = TRUE, eval = FALSE}
library(tidyverse)
```

## What's tidyverse?

![](images/paste-9571686D.png){fig-align="center" width="610"}

::: aside
Artwork by Allison Horst
:::

## Tidy data

> We say that a data table is in *tidy* format if each row represents one observation and columns represent the different variables available for each of these observations.

![](images/paste-02EFA4CE.png){fig-align="center" width="671"}

::: aside
Illustrations from the [Openscapes](https://www.openscapes.org/) blog [Tidy Data for reproducibility, efficiency, and collaboration](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst
:::

## Messy data

> Every messy data set is messy in its own way. - Hadley Wickham

![](images/paste-FBCF203D.png){fig-align="center" width="683"}

::: aside
Illustrations from the [Openscapes](https://www.openscapes.org/) blog [Tidy Data for reproducibility, efficiency, and collaboration](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst
:::

## Common characteristics of messy data

::: columns
::: {.column width="50%"}
-   Commas in numeric values

-   Numeric values stored as character data types

-   Duplicate rows

-   Misspellings

-   Capitalization (e.g., sparrow, Sparrow)

-   Inaccuracies

-   White space

-   Missing data

-   Zeros instead of null values

-   ... and many more
:::

::: {.column width="50%"}
![](images/paste-71148868.png){fig-align="center"}
:::
:::

::: aside
Illustrations from the [Openscapes](https://www.openscapes.org/) blog [Tidy Data for reproducibility, efficiency, and collaboration](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst
:::

## Pipe

> In R we can perform a series of operations by sending the results of one function to another using what is called the *pipe operator*: `%>%` or `|>`

::: columns
::: {.column width="40%"}
<!-- -->

-   A thing I will be using through out this lab...

-   Think it like the English word "then".

<!-- -->

-   First, we are dogs

-   Then, drop one ear

-   Then, rotate your head for max cuteness

-   We will get treats!
:::

::: {.column width="60%"}
![](images/paste-0AE74B91.png){fig-align="right" width="626"}
:::
:::

::: aside
Artwork by Allison Horst
:::

## Pipe: %\>% or \|\>

Let's say, we want to find the mean of the petal length column in the iris data set.

::: columns
::: {.column width="50%"}
#### In base R:

```{r, echo = TRUE}

petal_length <- iris$Petal.Length 
petal_length_mean <- mean(petal_length)


petal_length_mean
```

#### You can also do:

```{r, echo = TRUE}
petal_length_mean <- mean(iris$Petal.Length)

petal_length_mean
```
:::

::: {.column width="50%"}
#### In tidyverse, using pipe:

```{r, echo = TRUE}

petal_length_mean <- iris %>%
  pull(Petal.Length) %>%
  mean()

petal_length_mean

```

#### Advantages of using pipe:

-   reduce the number of unnecessary objects
-   easier to read as it has the same logic as speaking
:::
:::

-   In this lab, I am going to use `%>%` for code demonstration, but feel free to use whatever you feel comfortable and efficient.

## Pipe: %\>% or \|\>

-   Pipe is especially powerful when there are multiple operations need to be applied to an object.

### In base R

```{r, echo = TRUE}

iris_sub <- head(iris, n = 50)

iris_sub_sepal_length <- iris_sub$Sepal.Length

iris_sub_sepal_length_mean <- mean(iris_sub_sepal_length, na.rm = TRUE)

iris_sub_sepal_length_mean


```

#### In tidyverse, using pipe:

```{r, echo = TRUE}

iris_sub_sepal_length_mean <- iris %>%
  head(n = 50) %>%
  pull(Sepal.Length) %>%
  mean(na.rm = TRUE)

iris_sub_sepal_length_mean
```

## Base R vs tidyverse?

There is no right or wrong or which way should be used. And both can achieve same tasks. But once you do much more coding, you might find tidyverse coding makes data analysis a bit easier. 😃

::: columns
::: {.column width="50%"}
#### Base R: all the functionality that comes built into the R programming language

-   Use intermediate objects

-   Use `data.frame` data type to manage data frames

-   Use `read.csv()` to import files

-   Use `[ , col]` or `$` to isolate column

-   ... and more
:::

::: {.column width="50%"}
#### Tidyverse: a collection of packages that add onto R, with its own focus on data analysis.

-   Use pipes

<!-- -->

-   Use `tibble` data type to manage data frames

-   Use `read_csv()` to import files

-   Use `pull()` function to isolate column

-   ... and more
:::
:::

# Data I/O: with csv files

with tidyverse `readr` package

## Overview

With `readr` and `readxl`, you will be able to use the following functions to read spreadsheets into R.

| Function       | Format                                            | Typical suffix |
|-------------------|-----------------------------------|-------------------|
| `read_delim()` | general text file format, must define delimiter   | .txt           |
| `read_csv()`   | comma separated values                            | .csv           |
| `read_csv2()`  | semicolon separated values                        | .csv           |
| `read_tsv()`   | tab delimited separated values                    | .tsv           |
| `read_table()` | white space separated values                      | .txt           |
| `read_excel()` | auto detect the format for Microsoft excel sheets | .xlsx or .xls  |

::: aside
Note: You will need to install `readxl` package in order to use `read_excel()` function
:::

## Read CSVs

> `read_csv()` take one necessary argument, which is `file`, a path to a file.

-   `here()` can help produce the file relative path

-   in this example, I have my file `my_data.csv` locates within a folder called `data`

```{r, echo = TRUE}

my_data <- read_csv(file = here("data", "my_data.csv"))

my_data
```

## Write CSVs

### csv is the most commonly used because of its simplicity and compatibility

> `write_csv()` takes two necessary arguments `x`, the data frame object you want to export, and `file`, the path you want to save the file to.

```{r, echo = TRUE}

write_csv(x = my_data,
          file = here("data", "my_data_1.csv"))
```

Now, check your folder, and you should find a file got saved with the name `my_data.csv`.

# Data wrangling: rows

with tidyverse `dplyr` package

-   `filter()`

-   `arrange()`

-   `distinct()`

## filter()

> Keep rows that match condition(s). Input a tibble, return a filtered tibble.

![](https://bookdown.org/pdr_higgins/rmrwr/images/allison_horst_dplyr_filter.jpg){fig-align="center" width="670"}

::: aside
Artwork by Allison Horst
:::

## filter()

### Keep rows where bill length value larger than 18

```{r, echo = TRUE}
penguins %>% 
  filter(bill_depth_mm > 18)
```

## filter()

### Keep rows that is NOT measured from Torgersen island

```{r, echo = TRUE}
penguins %>% 
  filter(island != "Torgersen")
```

## filter()

### Multiple conditions

```{r, echo = TRUE}
penguins %>% 
  filter(species == "Chinstrap" & island == "Dream")
```

## filter()

### Remove rows with missing values

This doesn't work, because `NA` is not comparable

```{r, echo = TRUE, eval = FALSE}
penguins %>%
  filter(bill_depth_mm != NA)
```

Do this, using `is.na()` function

```{r, echo = TRUE, eval = FALSE}
penguins %>%
  filter(!is.na(bill_depth_mm))
```

Or this, using `drop_na()` function

```{r, echo = TRUE, eval = FALSE}
penguins %>%
  drop_na(bill_depth_mm)
```

## filter()

### Keep rows that contain elements of interest

```{r, echo = TRUE}

species_vector <- c("King", "Emperor", "Snares", "Chinstrap")

penguins %>%
  filter(species %in% species_vector)

```

## arrange()

> Order rows using column values

```{r, echo = TRUE}
penguins %>% 
  arrange(island, desc(bill_length_mm))
```

## distinct()

> Keep distinct/unique rows

```{r, echo = TRUE}
penguins %>%
  distinct(species, island, .keep_all = TRUE)
```

# Data wrangling: columns

with tidyverse `dplyr` package

-   `mutate()`

-   `select()`

-   `rename()`

-   `relocate()`

## mutate()

> Create, modify, and delete columns

::: columns
::: {.column width="50%"}
![](images/bd4ae264-ae51-4d18-bd60-7a058ab42fba.png)
:::

::: {.column width="50%"}
### Create: fixed value, ID number

```{r, echo = TRUE, eval = FALSE}
penguins %>%
  mutate(visit = "summer",
         ID = seq(1: nrow(.)))
```

### Create: apply math

```{r, echo = TRUE, eval = FALSE}
penguins %>%
  mutate(depth_square = bill_depth_mm**2)
```
:::
:::

::: aside
Artwork by Allison Horst
:::

## mutate()

### Modify: one condition with `if_else()`

```{r, echo = TRUE, eval = FALSE}
penguins %>%
  mutate(sex = if_else(sex == "male", "Male", "Female"))
```

### Modify: multiple conditions with `case_when()`

```{r, echo = TRUE, eval = FALSE}
penguins %>%
  mutate(species = case_when(
    species == "Adelie" ~ "adelie",
    species == "Chinstrap" ~ "chinstrap",
    species == "Gentoo" ~ "gentoo",
    .default = "all other cases" # by default return NA
  ))
```

## mutate()

### Modify: categorize numerical variable equal intervals

```{r, echo = TRUE, eval = FALSE}
penguins %>%
  mutate(bill_length_mm = cut(bill_length_mm, 
                              breaks = seq(30, 60, 10),
                              labels = c("short", "median", "long")))
```

### Modify: change data type of a column

Same idea for `as.numeric()`, `as.integer()`, and `as.character()`

```{r, echo = TRUE, eval = FALSE}
penguins %>%
  mutate(year = as_factor(year))
```

### Delete columns

```{r, echo = TRUE, eval = FALSE}
penguins %>%
  mutate(species = NULL, 
         island = NULL)
```

## select()

> Keep or drop columns using their names and types

::: columns
::: {.column width="50%"}
### Keep columns

```{r, echo = TRUE}
penguins %>%
  select(species, island, 4:6) %>%
  colnames()
```
:::

::: {.column width="50%"}
### Drop columns

```{r, echo = TRUE}
penguins %>%
  select(!c(species, island)) %>%
  colnames()
```
:::
:::

## rename()

> Rename columns

```{r, echo = TRUE, eval = FALSE}
penguins %>%
  rename(penguin_species = species,
         data_year = year,
         bird_sex = sex)
```

![](images/ed07d56b-c5c8-43af-84be-5bcab97eca75-01.png){fig-align="center" width="687"}

::: aside
Artwork by Allison Horst
:::

## relocate()

> Change column order

```{r, echo = TRUE}
penguins %>%
  mutate(ID = seq(1:nrow(.))) %>%
  relocate(ID, .after = island) %>%
  glimpse()
```

![](images/850e4954-e2c6-4df1-a3c0-34764a05a3df.png){.absolute top="200" right="0" width="668"}

::: aside
Artwork by Allison Horst
:::

# Data wrangling: group calculation

Create new columns that are the result of calculations performed on groups of data

## group_by() & ungroup()

> Group by one or more variables

-   Let's take a look

-   It looks almost the same as the original tibble

-   Notice the extra "Group" info

::: columns
::: {.column width="50%"}
```{r, echo = TRUE}
penguins 
```
:::

::: {.column width="50%"}
```{r, echo = TRUE}
penguins %>% 
  group_by(species, island) 
```
:::
:::

## Use with mutate()

### Calculate the difference between flipper length and their species means

```{r, echo = TRUE}
penguins %>%
  group_by(species) %>%
  mutate(flipper_lengh_dif = flipper_length_mm - mean(flipper_length_mm, na.rm = TRUE)) 
```

## Use with summarize()

### Find the mean bill length of each penguin species

::: columns
::: {.column width="50%"}
#### You can do:

```{r, echo = TRUE}
penguins %>%
  filter(species == "Adelie") %>%
  pull(bill_length_mm) %>%
  mean(na.rm = TRUE)

penguins %>%
  filter(species == "Chinstrap") %>%
  pull(bill_length_mm) %>%
  mean(na.rm = TRUE)

penguins %>%
  filter(species == "Gentoo") %>%
  pull(bill_length_mm) %>%
  mean(na.rm = TRUE)
```
:::

::: {.column width="50%"}
#### Or this way:

```{r, echo = TRUE}

penguins %>%
  group_by(species) %>%
  summarize(bill_length_mean = 
              mean(bill_length_mm, na.rm = TRUE))

```
:::
:::

## Use with summarize()

### `summarise()` and `summarize()` are synonyms.

::: columns
::: {.column width="50%"}
```{r, echo = TRUE, eval = FALSE}
penguins %>%
  group_by(species) %>%
  summarize(bill_length_mean = 
              mean(bill_length_mm, na.rm = TRUE))
```
:::

::: {.column width="50%"}
```{r, echo = TRUE, eval = FALSE}
penguins %>%
  group_by(species) %>%
  summarise(bill_length_mean = 
              mean(bill_length_mm, na.rm = TRUE))
```
:::
:::

### It's works the same as specify .by inside summarize()

::: columns
::: {.column width="50%"}
```{r, echo = TRUE}
penguins %>%
  group_by(species) %>%
  summarize(bill_length_mean = 
              mean(bill_length_mm, na.rm = TRUE))
```
:::

::: {.column width="50%"}
```{r, echo = TRUE}

penguins %>%
  summarize(bill_length_mean = 
              mean(bill_length_mm, na.rm = TRUE),
            .by = species)
```
:::
:::

## Use with summarize()

### You can summarize multiple values at the same time

```{r, echo = TRUE}
penguins %>%
  group_by(species) %>%
  summarize(count = n(),
            islands_n = n_distinct(island),
            flipper_length_mean = mean(flipper_length_mm, na.rm = TRUE),
            flipper_length_sd = sd(flipper_length_mm, na.rm = TRUE))
```

## Use with slice_sample()

### Use stratified sampling to select 10 individuals from each species  

```{r, echo = TRUE}
penguins %>%
  group_by(species) %>%
  slice_sample(n = 10)
```

### It's works the same as specify .by inside summarize()

::: columns
::: {.column width="50%"}
```{r, echo = TRUE, eval = FALSE}
penguins %>%
  group_by(species) %>%
  slice_sample(n = 10)
```
:::

::: {.column width="50%"}
```{r, echo = TRUE, FALSE}
penguins %>%
  slice_sample(n = 10, .by = species)
```
:::
:::

# Data wrangling: reshape

with tidyverse `dplyr` package

## pivot_longer()

## pivot_wider()

# Data wrangling: combining two tibbles

# R Others: Miscellaneous

Here is some advanced materials if you are comfortable and familiar with the content above

## What's wrong?

-   no installation of package

-   no bracket

-   wrong kind of bracket

-   ggplot2 package but the function is ggplot haha

-   no geom\_() specified

-   the theme is not working because of the sequence

-   fill and colour in bar plot!

## R `ggplot()` cheatsheet

## Commenting your code

## Short cuts

-   Ctrl + Enter

-   Ctrl +Shift + C

-   Ctrl + I

-   Ctrl + L

-   Esc

-   Ctrl + S

# Lab assignment

## Your task

We are going to work on the `penguins_raw` data set from the `palmarpenguins` package. Your task is to **wrangle** the `penguins_raw` and make it look like our target data set, which I provided as a *.csv* file on Moodle.

-   Download the *NRES776_target_lab3.csv* from Moodle.

-   Here are some lines might be helpful for you to get started.

-   The goal is to get the `all_equal()` to return `TRUE`!

```{r, echo = TRUE, eval = FALSE}

### Library, add any libraries you might need
library(tidyverse)
library(here)
library(palmerpenguins)

### Read in the target data set, or however your prefer to import data
target <- read_csv("data/NRES776_target_lab3.csv")

### Your code here
my_clean_dataset <- penguins_raw %>%
  ...

### Final check
all_equal(my_clean_dataset, target)
```

## Your task

### Hints

## Submission

### Due next Wednesday 23:59 pm, Moodle

### Evaluation

-   File name and type (NRES776\_*firstname*\_*lastname*\_lab_2.**png**) (10%)

-   Accuracy, 15%, and quality, 25%, of each two plots -\> (80%)

-   Annotation of the final patchwork product (10%)

-   Bonus points for extra question (30%)

### Use of ChatGPT, stackflow, or...

-   Copy/Paste is your friend! (and never apologize for it!) 😍

-   But be sure you understand **why** the codes are doing what they are doing 🧑‍🎓

-   So that you form some new neuron connections in the brain 🧠

## Quiet/Noisy room

![](images/d6b4f8cb-53bf-49d5-822c-e45cd01204a4.png){fig-align="center" width="867"}

::: footer
Artwork by @allison_horst
:::

## Wrap up

### Before we meet again

-   Have a nice food intake

-   Have a nap

-   Have a good break

### Next time

-   Will see you in 1.5 hours on zoom!
