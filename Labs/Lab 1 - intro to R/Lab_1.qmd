---
title: "NRES 776 Lab 1"
subtitle: "Introduction to R"
author: Sunny Tseng
format:
  revealjs: 
    slide-number: true
    preview-links: auto
    css: styles.css
    #footer: <https://quarto.org>
    theme: [default, styles.scss]
    smaller: true
    scrollable: true
    incremental: true
    embed-resources: true
editor: visual
---

# Welcome to your first R lab!

## Our schedule today

-   Discussion paper presentation (30 min)

-   Lab intro (10 min)

-   Intro to R, R studio, and gentle intro to programming (60 min)

-   Quiet time for practice (60 min)

# Lab intro

## About these labs

### Consider keeping your video on

-   For showing lovely pets
-   Ultimately, you need to be comfortable (and you have the right to privacy)
-   Feel free to unmute and ask questions!

### Format

-   I will provide you tools and workflow to get started with R

-   We will have lectures, demonstration, hands-on, and free time

### R is hard: But we have no fear

-   Don't expect to remember everything

-   Copy/Paste is your friend

## Imposte**R** Syndrome

![](images/imposter.PNG){fig-align="center"}

## Imposte**R** Syndrome

![](images/imposter_1.PNG){fig-align="center"}

## You might experience this during the course

![](images/d65eb83f-66e4-4760-8c1f-29d336d1d6df.png){fig-align="center" width="430"}

::: footer
Artwork by @allison_horst
:::

## What is R?

> A programming **language**, a way to give instructions in order to get a computer to do something

-   We will learn together how to speak the language (i.e., writing the code)

-   Computers can only read your code, but not your mind

-   Spelling, punctuation, space, capitalization matter!

### For example

R, what is 78 times 87?

```{r, echo = TRUE}

78 * 87
```

## Why R?

R is hard

```{r, echo = TRUE, eval = FALSE}
#| warning: false

library(seewave)
library(tuneR)

dir <- "E:/Audio/2021_passerine"
dataset <- read_csv(here("Ch1_BirdNET", "data", "2021_MacGillivray's Warbler_working.csv"))


for (i in 101:180) {
  site <- dataset$site[i]
  recording <- dataset$recording[i]
  start_s <- dataset$start_s[i]
  end_s <- dataset$end_s[i]
  
  
  song <- readWave(paste0(dir, "/", site, "/", recording, ".wav"), 
                   from = start_s - 1, 
                   to = end_s + 1, 
                   units = "seconds")
  
  print(paste0("This is recording ", recording, " from ", start_s, " to ", end_s))
  play(song, ... = "/play /close")
}
```

## Why R?

R is hard - but powerful

![](images/Capture-01.PNG){fig-align="center"}

-   When data is beyond your ability to manage in excels

-   I used R Quarto to make these slides, and R markdown for the course syllabus

## Why R?

R is hard - but beautiful

```{r}

library(palmerpenguins)
library(ggplot2)
ggplot2::theme_set(ggplot2::theme_minimal())

mass_flipper <- ggplot(data = penguins, 
                       aes(x = flipper_length_mm,
                           y = body_mass_g)) +
  geom_point(aes(color = species, 
                 shape = species),
             size = 3,
             alpha = 0.8) +
  scale_color_manual(values = c("darkorange","purple","cyan4")) +
  labs(title = "Penguin size, Palmer Station LTER",
       subtitle = "Flipper length and body mass for Adelie, Chinstrap and Gentoo Penguins",
       x = "Flipper length (mm)",
       y = "Body mass (g)",
       color = "Penguin species",
       shape = "Penguin species") +
  theme(legend.position = c(0.2, 0.7),
        plot.title.position = "plot",
        plot.caption = element_text(hjust = 0, face= "italic"),
        plot.caption.position = "plot")

print(mass_flipper)
#> Warning: Removed 2 rows containing missing values (geom_point).
```

## Why R?

R is hard - but reproducible and free!

![](images/CaptureR.PNG){fig-align="center"}

## R vs RStudio

::: columns
::: {.column width="50%"}
![](images/R_logo.svg.png){fig-align="center" width="333"}
:::

::: {.column width="50%"}
![](images/download.jpg){fig-align="center" width="599"}
:::
:::

-   RStudio is not R, RStudio is a Graphic User Interfaces (GUI)

-   Which means you can code with R without RStudio

-   But! RStudio makes programming with R easier

-   And it will make your life easier

# Programming with R

## Let's get started with RStudio!

### Changing options: Tools \> Global Options

-   General \> Restore RData into workspace at startup (NO!)

-   General \> Save workspace to on exit (No!)

-   Appearance \> Theme and font size (Personal preference)

### Start a project: File \> New Project \> New Directory \> New Project

-   Name the project as you like (e.g., NRES776_lab_1)

-   Save the project as you wish (e.g., in your desktop)

-   You will find a new folder created in the directory that you provided

-   R project can help handling directories, and organizes your work

## Demonstration {background-color="#DDF1FF"}

### Let's take a look at RStudio

-   The layout of the windows (console, objects, files/plots)

-   Create a project for this lab

-   Create a new script (New File \> R Script)

-   Save the Script to the project folder

### 

## Your first R code!

```{r, echo = TRUE, eval = FALSE}
# First load the package
library(tidyverse)

# Now create the figure
ggplot(data = msleep, aes(x = sleep_total, y = sleep_rem, colour = vore)) +
  geom_point(size = 2)

```

-   Copy/Paste or type this into the script window in RStudio

-   Click anywhere on the first line of the code

-   Use the **Run** button to run this code, or use the short-cut `Ctrl-Enter`

    -   And repeat this until you ran all the codes

## Your first R code!

```{r, echo = TRUE}
# First load the package
library(tidyverse)

# Now create the figure
ggplot(data = msleep, aes(x = sleep_total, y = sleep_rem, colour = vore)) +
  geom_point(size = 2)

```

## Your first R code!

```{r, echo = TRUE}
# First load the package
library(tidyverse)

# Now create the figure
ggplot(data = msleep, aes(x = sleep_total, y = sleep_rem, colour = vore)) +
  geom_point(size = 2)

```

# R basic: Objects

# R basic: Workspace

# R basic: Functions

# R basic: Variable names

# R basic: Data types

# 

# Lab assignment

## Use of ChatGPT, or stackflow, or other sources

## Wrap up

### Before we meet again

-   

### Next time

-   Next Tue. lecture, Virtual on zoom, with Sunny
