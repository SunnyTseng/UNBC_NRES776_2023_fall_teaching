---
title: "NRES 776 Lab 1"
subtitle: "Introduction to R"
author: Sunny Tseng
format:
  revealjs: 
    slide-number: true
    preview-links: auto
    css: styles.css
    #footer: <https://quarto.org>
    theme: [default, styles.scss]
    smaller: true
    scrollable: true
    incremental: true
    embed-resources: true
editor: visual
---

# Welcome to your first R lab!

## Our schedule today

-   Discussion paper presentation (30 min)

-   Lab intro (10 min)

-   Intro to R, R studio, and gentle intro to programming (60 min)

-   Quiet time for practice (60 min)

# Lab intro

## About these labs

### Consider keeping your video on

-   Food? Pets? Other creatures? We would love to see them!
-   Ultimately, you need to be comfortable (and you have the right to privacy)
-   Feel free to unmute and ask questions

### Format

-   I will provide you tools and workflow to get started with R

-   We will have lectures, demonstration, hands-on, and free time

### R is hard: But we have no fear

-   Don't expect to remember everything

-   Copy/Paste is your friend

## Imposte**R** Syndrome

![](images/imposter.PNG){fig-align="center"}

## Imposte**R** Syndrome

![](images/imposter_1.PNG){fig-align="center"}

## You might experience this during the course

![](images/d65eb83f-66e4-4760-8c1f-29d336d1d6df.png){fig-align="center" width="430"}

::: footer
Artwork by @allison_horst
:::

## What is R?

> A programming **language**, a way to give instructions in order to get a computer to do something

-   We will learn together how to speak the language (i.e., writing the code)

-   Computers can only read your code, but not your mind

-   Spelling, punctuation, space, capitalization matter!

### For example

R, what is 78 times 87?

```{r, echo = TRUE}

78 * 87
```

## Why R?

R is hard

```{r, echo = TRUE, eval = FALSE}
#| warning: false

library(seewave)
library(tuneR)

dir <- "E:/Audio/2021_passerine"
dataset <- read_csv(here("Ch1_BirdNET", "data", "2021_MacGillivray's Warbler_working.csv"))


for (i in 101:180) {
  site <- dataset$site[i]
  recording <- dataset$recording[i]
  start_s <- dataset$start_s[i]
  end_s <- dataset$end_s[i]
  
  
  song <- readWave(paste0(dir, "/", site, "/", recording, ".wav"), 
                   from = start_s - 1, 
                   to = end_s + 1, 
                   units = "seconds")
  
  print(paste0("This is recording ", recording, " from ", start_s, " to ", end_s))
  play(song, ... = "/play /close")
}
```

## Why R?

R is hard - but powerful

![](images/Capture-01.PNG){fig-align="center"}

-   When data is beyond your ability to manage in excels

-   I used R Quarto to make these slides, and R markdown for the course syllabus

## Why R?

R is hard - but beautiful

```{r}

library(palmerpenguins)
library(ggplot2)
ggplot2::theme_set(ggplot2::theme_minimal())

mass_flipper <- ggplot(data = penguins, 
                       aes(x = flipper_length_mm,
                           y = body_mass_g)) +
  geom_point(aes(color = species, 
                 shape = species),
             size = 3,
             alpha = 0.8) +
  scale_color_manual(values = c("darkorange","purple","cyan4")) +
  labs(title = "Penguin size, Palmer Station LTER",
       subtitle = "Flipper length and body mass for Adelie, Chinstrap and Gentoo Penguins",
       x = "Flipper length (mm)",
       y = "Body mass (g)",
       color = "Penguin species",
       shape = "Penguin species") +
  theme(legend.position = c(0.2, 0.7),
        plot.title.position = "plot",
        plot.caption = element_text(hjust = 0, face= "italic"),
        plot.caption.position = "plot")

print(mass_flipper)
#> Warning: Removed 2 rows containing missing values (geom_point).
```

## Why R?

R is hard - but reproducible and free!

![](images/CaptureR.PNG){fig-align="center"}

## R vs RStudio

::: columns
::: {.column width="50%"}
![](images/R_logo.svg.png){fig-align="center" width="333"}
:::

::: {.column width="50%"}
![](images/download.jpg){fig-align="center" width="599"}
:::
:::

-   RStudio is not R, RStudio is a Graphic User Interfaces (GUI)

-   Which means you can code with R without RStudio

-   But! RStudio makes programming with R easier

-   And it will make your life easier

# Dip your toes in

## Let's get started with RStudio!

### Changing options: Tools \> Global Options

-   General \> Restore RData into workspace at startup (NO!)

-   General \> Save workspace to on exit (No!)

-   Appearance \> Theme and font size (Personal preference)

### Start a project: File \> New Project \> New Directory \> New Project

-   Name the project as you like (e.g., NRES776_lab_1)

-   Save the project as you wish (e.g., in your desktop)

-   You will find a new folder created in the directory that you provided

-   R project can help handling directories, and organizes your work

## Demonstration {background-color="#DDF1FF"}

### Let's take a look at RStudio

-   The layout of the windows

-   Create a project for this lab

-   Create a new script (New File \> R Script)

-   Save the Script to the project folder

### Script (top left)

### Console (bottom left)

### Global environment (top right)

### Files/plots output (bottom right)

## Your first R code!

```{r, echo = TRUE, eval = FALSE}
# First load the package
library(tidyverse)

# Now create the figure
ggplot(data = msleep, aes(x = sleep_total, y = sleep_rem, colour = vore)) +
  geom_point(size = 2)

```

-   Copy/Paste or type this into the script window in RStudio

-   Click anywhere on the first line of the code

-   Use the **Run** button to run this code, or use the short-cut `Ctrl-Enter`

    -   And repeat this until you ran all the codes

## Your first R code!

```{r, echo = TRUE}
# First load the package
library(tidyverse)

# Now create the figure
ggplot(data = msleep, aes(x = sleep_total, y = sleep_rem, colour = vore)) +
  geom_point(size = 2)

```

## Your first R code!

```{r, echo = TRUE}
# First load the package
library(tidyverse)

# Now create the figure
ggplot(data = msleep, aes(x = sleep_total, y = sleep_rem, colour = vore)) +
  geom_point(size = 2)

```

-   Code (the way you communicate with the computer)

-   Script (a whole bunch of code)

-   Output

## How are you doing?

![](images/31e5b53b-32b2-4a1f-b966-31fb14d1867e.png){fig-align="center"}

::: footer
Artwork by @allison_horst
:::

# R basic: Objects

## Concept of object

> Everything in R is an object. These objects can be almost anything, from a single number to a character string, or a plot, or a dataframe. Objects in R are often called **variables**.

```{r, echo = TRUE}

# this is an object called a, and its content is 1
a <- 1 
```

```{r}
# this is an object called b, and its content is "I love stats"
b <- "I love stats"
```

```{r}
# this is an object called c, and its content is a vector (2,3,4,5)
c <- c(2,3,4,5)
```

## Creating objects

> To create an object we simply give the object a name. We can then assign a value to this object using the *assignment operator* `<-` (sometimes called the *gets operator*). The assignment operator is a composite symbol comprised of a 'less than' symbol `<` and a hyphen `-` .

-   To create an object:

```{r, echo = TRUE}
my_obj <- "I am hungry"
```

-   To call, or view the content of the object:

```{r, echo = TRUE}
my_obj
```

## The objects live in your Global Environment

> All of the objects you create will be stored and you can view them in RStudio by clicking on the 'Environment' tab in the top right hand pane.

## The art of naming objects

> Naming your objects is one of the most difficult things you will do in R (seriously).

::: columns
::: {.column width="30%"}
**To do**

-   Keep it short

-   Keep it informative

-   Use `camelCase`

-   `snake_case`

-   or `PascalCase`
:::

::: {.column width="70%"}
![](images/dbb99049-2916-4bc8-824f-1816f5c4f06d-01.png){fig-align="center" width="969"}
:::
:::

::: footer
Artwork by @allison_horst
:::

## The art of naming objects

> Naming your objects is one of the most difficult things you will do in R (seriously).

**Not to do**

-   Start with a number (`2my_variable`)

-   Start with a dot followed by a number (`.2my_variable`)

-   Use non-alphanumeric characters (i.e. &, \^, /, ! etc)

-   Use space

-   Name your objects with reserved words (i.e. `TRUE`, `NA`)

One that crops up more times than we can remember is:

```{r, eval = FALSE, echo = TRUE}
data <- read.table("mydatafile", header = TRUE) #data is a function!
```

# R basic: Operators

## Arithmetic operators

> To perform common mathematical operations.

| Operator   | Name                              |
|------------|-----------------------------------|
| \+         | Addition                          |
| \-         | Subtraction                       |
| \*         | Multiplication                    |
| /          | Division                          |
| \^ or \*\* | Exponent                          |
| %%         | Modulus (remainder from division) |
| %/%        | Integer Division                  |

```{r, echo = TRUE}
10 + 5
```

```{r, echo = TRUE}
a <- 10
b <- 5

a + b
```

## Comparison operators

> To compare two values.

| Operator | Name                     |
|----------|--------------------------|
| ==       | Equal                    |
| !=       | Not equal                |
| \>       | Greater than             |
| \<       | Less than                |
| \>=      | Greater than or equal to |
| \<=      | Less than or equal to    |

## Logical operators

> To combine conditional statements

| Operator | Description                                    |
|----------|------------------------------------------------|
| &        | Returns TRUE if both elements are TRUE         |
| &&       | Returns TRUE if both statements are TRUE       |
| \| or II | Returns TRUE if one of the statement is TRUE   |
| !        | Returns FALSE if statement is TRUE, vice versa |

## Miscellaneous operators

> Very useful in manipulating data!

| Operator | Description                                |
|----------|--------------------------------------------|
| :        | Creates a series of numbers in a sequence  |
| %in%     | Find out if an element belongs to a vector |
| %\*%     | Matrix Multiplication                      |

# R basic: Data types

# R basic: Functions

# Lab assignment

## Your task

Do different kinds of sampling using what we learned.

1.  Import data (working directory, set objects, import data, n, data_penguin)
2.  Calculation the population mean and standard deviation
    -   Simple random sampling (mean, standard deviation) (save as simple_random vector)
    -   Stratified sampling (mean, standard deviation) (save as stratified vector)
3.  Create a dataframe named sampling_stat with column names as "type", "mean", "sd"

## Lab 1 answer key

```{r, echo = TRUE, eval = FALSE}

### library
library(palmerpenguins)
library(tidyverse)

### set.seed for the randomization
set.seed(100)

### remove NAs from the flipper_length_mm
penguins_no_na <- drop_na(penguins)


### population
p_df <- penguins_no_na

p_mean <- mean(p_df$flipper_length_mm)
p_sd <- sd(p_df$flipper_length_mm)
p_cor <- cor(p_df$flipper_length_mm, p_df$bill_length_mm)

p_vector <- c(p_mean, p_sd, p_cor)


### simple random sampling
srs_df <- slice_sample(.data = penguins_no_na, n = 30)

srs_mean <- mean(srs_df$flipper_length_mm)
srs_sd <- sd(srs_df$flipper_length_mm)
srs_cor <- cor(srs_df$flipper_length_mm, srs_df$bill_length_mm)

srs_vector <- c(srs_mean, srs_sd, srs_cor)

### stratified sampling
ss_df <- slice_sample(.data = penguins_no_na, n = 10, by = species)

ss_mean <- mean(ss_df$flipper_length_mm)
ss_sd <- sd(ss_df$flipper_length_mm)
ss_cor <- cor(ss_df$flipper_length_mm, ss_df$bill_length_mm)

ss_vector <- c(ss_mean, ss_sd, ss_cor)

### combine everything together
final <- tibble(statistics = c("mean", "sd", "cor"), 
               population = p_vector, 
               simple_random = srs_vector, 
               stratified = ss_vector)
```

## Lab 1 answer key (advanced)

```{r, echo = TRUE, eval = FALSE}
### population
p_df <- penguins_no_na

p_mean <- mean(p_df$flipper_length_mm)
p_sd <- sd(p_df$flipper_length_mm)
p_cor <- cor(p_df$flipper_length_mm, p_df$bill_length_mm)

p_vector <- c(p_mean, p_sd, p_cor)

### population
p_vector <- penguins_no_na %>%
  summarize(p_mean = mean(flipper_length_mm),
            p_sd = sd(flipper_length_mm),
            p_cor = cor(flipper_length_mm, bill_length_mm)) 
```

## Use of ChatGPT, stackflow, or...

-   Copy/Paste is your friend! (and never apologize for it!)

-   But be sure you understand **why** the codes are doing what they are doing

-   So that you form some new neuron connections in the brain

-   Then you will know how to speak R more fluently and independently next time

-   Eventually, it's you deciding how and what you want to learn, and where you want to be

## Submission

### Due next Wednesday 23:59 pm, Moodle

### Evaluation

-   File format (names.R) (50%)

-   Accuracy of the code (15%, 20%, 15%)

-   Bonus points (10%)

## Enjoy the errors and after the errors

![](images/d6b4f8cb-53bf-49d5-822c-e45cd01204a4.png){fig-align="center" width="867"}

::: footer
Artwork by @allison_horst
:::

# Quiet/Noisy room

## Wrap up

### Before we meet again

-   Have a nice food intake

-   Have a nap

-   Have a good break

### Next time

-   Will see you in 1.5 hours on zoom!
